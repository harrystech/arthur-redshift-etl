{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Settings",
    "description": "Schema for settings of data warehouse, upstream sources, and ETL",
    "$defs": {
        "aws_arn": {
            "description": "See http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html",
            "type": "string",
            "pattern": "^arn:aws[^:]*:[^:]*:[^:]*:[0-9a-f]+:"
        },
        "identifier": {
            "description": "Standard identifier (either SQL or AWS)",
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_$-]*$",
            "minLength": 1,
            "maxLength": 127
        },
        "identifier_list": {
            "type": "array",
            "items": { "$ref": "#/$defs/identifier" },
            "uniqueItems": true,
            "minItems": 1
        },
        "tag": {
            "description": "Simple tag",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z_][-a-zA-Z0-9_]*$",
            "type": "string"
        },
        "tag_list": {
            "items": { "$ref": "#/$defs/tag" },
            "type": "array",
            "uniqueItems": true
        },
        "user_info": {
            "additionalProperties": false,
            "not": { "required": [ "group", "groups" ] },
            "oneOf": [
                {"required": [ "name", "groups" ]},
                {"required": [ "name", "group" ]}
            ],
            "properties": {
                "comment": { "type": "string" },
                "description": { "type": "string" },
                "group": { "$ref": "#/$defs/identifier" },
                "groups": { "$ref": "#/$defs/identifier_list" },
                "name": { "$ref": "#/$defs/identifier" },
                "schema": { "$ref": "#/$defs/identifier" }
            },
            "type": "object"
        },
        "glob_pattern_list": {
            "type": "array",
            "items": {
                "description": "glob pattern to select schema and name",
                "type": "string",
                "pattern": "^[a-zA-Z0-9*?_$-]+.[a-zA-Z0-9*?_$-]+$"
            },
            "uniqueItems": true,
            "minItems": 1
        },
        "bucket_template": {
            "description": "'Templates' used in static sources to configure their bucket",
            "type": "string",
            "pattern": "^(([a-zA-Z0-9._$-]+)|(\\${[.\\w]+}))+$"
        },
        "path_template": {
            "description": "'Templates' used in static sources to configure their effective prefix",
            "type": "string",
            "pattern": "^(([a-zA-Z0-9._$-]+/?)|(\\${[.\\w]+})/?)+$"
        },
        "upstream_database": {
            "description": "Description of an upstream database with access, tables and permissions for the copy",
            "type": "object",
            "properties": {
                "name": { "$ref": "#/$defs/identifier" },
                "description": { "type": "string" },
                "tags": { "$ref": "#/$defs/tag_list" },
                "read_access": { "$ref": "#/$defs/identifier" },
                "include_tables": { "$ref": "#/$defs/glob_pattern_list" },
                "exclude_tables": { "$ref": "#/$defs/glob_pattern_list" },
                "readers": { "$ref": "#/$defs/identifier_list" },
                "writers": { "$ref": "#/$defs/identifier_list" }
            },
            "required": [ "name", "read_access", "include_tables" ],
            "additionalProperties": false
        },
        "upstream_static": {
            "description": "Description of an upstream source consisting of files in S3, may also be an unload target",
            "type": "object",
            "properties": {
                "name": { "$ref": "#/$defs/identifier" },
                "description": { "type": "string" },
                "tags": { "$ref": "#/$defs/tag_list" },
                "s3_bucket": { "$ref": "#/$defs/bucket_template" },
                "s3_path_template": { "$ref": "#/$defs/path_template" },
                "s3_data_format": { "$ref": "#/$defs/s3_data_format" },
                "s3_unload_path_template": { "$ref": "#/$defs/path_template" },
                "include_tables": { "$ref": "#/$defs/glob_pattern_list" },
                "readers": { "$ref": "#/$defs/identifier_list" },
                "writers": { "$ref": "#/$defs/identifier_list" }
            },
            "anyOf": [
                { "required": [ "name", "s3_bucket", "s3_path_template"  ] },
                { "required": [ "name", "s3_bucket", "s3_unload_path_template" ] }
            ],
            "dependencies": {
                "include_tables": [ "s3_path_template" ]
            },
            "additionalProperties": false
        },
        "upstream_external": {
            "description": "Description of an external schema in AWS Redshift (listed in an AWS Glue Data Catalog)",
            "type": "object",
            "properties": {
                "name": { "$ref": "#/$defs/identifier" },
                "description": { "type": "string" },
                "external": { "enum": [ true ] },
                "tags": { "$ref": "#/$defs/tag_list" },
                "groups": { "$ref": "#/$defs/identifier_list" },
                "database": { "$ref": "#/$defs/identifier" },
                "iam_role": { "$ref": "#/$defs/aws_arn" }
            },
            "required": [ "name", "external" ],
            "additionalProperties": false
        },
        "s3_acl": {
            "description": "Access control policy setting for S3",
            "type": "string",
            "enum": [
                    "private",
                    "public-read",
                    "public-read-write",
                    "authenticated-read",
                    "aws-exec-read",
                    "bucket-owner-read",
                    "bucket-owner-full-control"
                ]
        },
        "s3_data_format": {
            "description": "Description of data format found in S3 objects to be COPY'ed",
            "type": "object",
            "properties": {
                "format": {
                    "enum": [ "AVRO", "CSV", "JSON" ]
                },
                "format_option": {
                    "description": "For CSV, that's the quotechar, for others it is the 's3://jsonpaths' file",
                    "type": "string"
                },
                "compression": {
                    "enum": [ "BZIP2", "GZIP" ]
                }
            },
            "required": [ "format" ],
            "additionalProperties": false
        },
        "cluster_group": {
            "description": "Either the master or core group for an EMR cluster",
            "type": "object",
            "properties": {
                "instance_type": { "type": "string" },
                "instance_count": {
                    "type": "integer",
                    "minimum": 1
                },
                "bid_price": {
                    "type": "number",
                    "minimum": 0.01
                },
                "managed_security_group": { "type": "string" }
            },
            "required": [ "instance_type", "managed_security_group" ],
            "additionalProperties": false
        }
    },
    "type": "object",
    "properties": {
        "arthur_settings": {
            "type": "object",
            "properties": {
                "etl_temp_dir": {
                    "type": "string",
                    "description": "Install directory in remote deployments (e.g. root of commands dispatched via arthur submit)"
                },
                "extract_retries": {
                    "description": "If an extract from an upstream source fails due to some transient error, retry the extract at most this many times. Zero disables retries",
                    "type": "integer",
                    "minimum": 0
                },
                "extract_jitter": {
                    "description": "Maximum number of seconds to wait during extract startup. For each extract call, a sleep duration is chosen at runtime uniformly between 0 and this value.",
                    "type": "integer",
                    "minimum": 0
                },
                "concurrent_load_idle_termination_seconds": {
                    "description": "Maximum number of seconds to wait during concurrent load for a new extract event.",
                    "type": "integer",
                    "minimum": 60
                },
                "copy_data_retries": {
                    "description": "If a COPY command fails with a database internal error (which we optimistically hope are transient), retry the COPY at most this many times. Zero disables retries",
                    "type": "integer",
                    "minimum": 0
                },
                "insert_data_retries": {
                    "description": "If an INSERT command fails to load data with an error pointing to S3 fetch, retry the INSERT at most this many times. Zero disables retries",
                    "type": "integer",
                    "minimum": 0
                },
                "logging": {
                    "description": "Configuration for logging",
                    "type": "object",
                    "properties": {
                        "cloudwatch": {
                            "type": "object",
                            "properties": {
                                "enabled": { "type": "boolean" },
                                "log_group": {
                                    "description": "Name of log group used in CloudWatch",
                                    "type": "string"
                                },
                                "log_level": {
                                    "enum": [ "DEBUG", "INFO", "WARNING" ]
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                },
                "retriable_error_codes": {
                    "description": "Comma-separated list of pgcode values which can be safely retried",
                    "type": "string"
                },
                "redshift": {
                    "description": "Settings specific to the Redshift dialect",
                    "type": "object",
                    "properties": {
                        "relation_column_encoding": {
                            "description": "Set encoding on COPY (with ON or PRESET) or automatically based on column usage.",
                            "enum": [ "AUTO", "OFF", "ON", "PRESET" ]
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [ "concurrent_load_idle_termination_seconds", "copy_data_retries", "extract_retries" ],
            "additionalProperties": false
        },
        "data_warehouse": {
            "type": "object",
            "properties": {
                "admin_access": { "$ref": "#/$defs/identifier" },
                "etl_access": { "$ref": "#/$defs/identifier" },
                "owner": { "$ref": "#/$defs/user_info" },
                "users": {
                    "type": "array",
                    "items": { "$ref": "#/$defs/user_info" },
                    "uniqueItems": true,
                    "minItems": 1
                },
                "transformations": {
                    "description": "List of schemas with transformations",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": { "$ref": "#/$defs/identifier" },
                            "description": { "type": "string" },
                            "groups": { "$ref": "#/$defs/identifier_list" },
                            "tags": { "$ref": "#/$defs/tag_list" }
                        },
                        "required": [ "name" ],
                        "additionalProperties": false
                    },
                    "uniqueItems": true
                },
                "required_for_success": {
                    "description": "List of patterns to identify 'required' relations whose fault will stop the ETL",
                    "oneOf": [
                        { "$ref": "#/$defs/glob_pattern_list" },
                        { "type": "boolean" }
                    ]
                }
            },
            "required": [ "admin_access", "etl_access", "owner", "users" ],
            "additionalProperties": false
        },
        "sources": {
            "type": "array",
            "description": "List of upstream sources (databases or files in S3)",
            "items": {
                "oneOf": [
                    { "$ref": "#/$defs/upstream_database" },
                    { "$ref": "#/$defs/upstream_static" },
                    { "$ref": "#/$defs/upstream_external" }
                ]
            },
            "minItems": 1,
            "uniqueItems": true
        },
        "type_maps": {
            "type": "object",
            "properties": {
                "as_is_att_type": {
                    "type": "object",
                    "additionalProperties": { "type": "string" }
                },
                "cast_needed_att_type": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": { "type": "string" },
                        "minItems": 3,
                        "maxItems": 3
                    }
                },
                "default_att_type": {
                    "type": "array",
                    "items": { "type": "string" },
                    "minItems": 3,
                    "maxItems": 3
                }
            },
            "required": [ "as_is_att_type", "cast_needed_att_type", "default_att_type" ],
            "additionalProperties": false
        },
        "data_lake": {
            "description": "Location and attributes for shared storage, e.g. for unloads",
            "type": "object",
            "properties": {
                "iam_role": {
                    "description": "DEPRECATED Use the more specific IAM role for S3",
                    "$ref": "#/$defs/aws_arn"
                },
                "s3": {
                    "type": "object",
                    "properties": {
                        "bucket_name": { "$ref": "#/$defs/identifier" },
                        "iam_role": { "$ref": "#/$defs/aws_arn" }
                    },
                    "required": [ "bucket_name" ],
                    "additionalProperties": false
                }
            },
            "required": [ "s3" ],
            "additionalProperties": false
        },
        "object_store": {
            "description": "Location and attributes for (temporary) storage for code and extracted data",
            "type": "object",
            "properties": {
                "iam_role": { "$ref": "#/$defs/aws_arn" },
                "s3": {
                    "type": "object",
                    "properties": {
                        "bucket_name": { "$ref": "#/$defs/identifier" },
                        "iam_role": { "$ref": "#/$defs/aws_arn" },
                        "upload_acl": { "$ref": "#/$defs/s3_acl" }
                    },
                    "required": [ "bucket_name" ],
                    "additionalProperties": false
                }
            },
            "required": [ "s3" ],
            "additionalProperties": false
        },
        "resources": {
            "type": "object",
            "properties": {
                "key_name": { "$ref": "#/$defs/identifier" },
                "VPC": {
                    "type": "object",
                    "properties": {
                        "region": { "$ref": "#/$defs/identifier" },
                        "account": {
                            "type": "string",
                            "pattern": "^[0-9]+$"
                        },
                        "name": { "$ref": "#/$defs/identifier" },
                        "public_subnet": { "$ref": "#/$defs/identifier" },
                        "private_subnet": { "$ref": "#/$defs/identifier" },
                        "whitelist_security_group": { "$ref": "#/$defs/identifier" }
                    },
                    "required": [ "region", "account", "name", "public_subnet", "whitelist_security_group" ],
                    "additionalProperties": false
                },
                "EC2": {
                    "type": "object",
                    "properties": {
                        "instance_type": { "type": "string" },
                        "image_id": { "type": "string" },
                        "public_security_group": { "$ref": "#/$defs/identifier" },
                        "iam_instance_profile": { "$ref": "#/$defs/identifier" }
                    },
                    "required": [ "instance_type", "image_id", "public_security_group", "iam_instance_profile" ],
                    "additionalProperties": false
                },
                "EMR": {
                    "type": "object",
                    "properties": {
                        "release_label": { "type": "string" },
                        "master": { "$ref": "#/$defs/cluster_group" },
                        "core": { "$ref": "#/$defs/cluster_group" },
                        "max_partitions": {
                            "description": "Maximum number of partitions during extract, limits num_partitions for each table",
                            "type": "integer",
                            "minimum": 1
                        }
                    },
                    "required": [ "release_label", "master", "core" ],
                    "additionalProperties": false
                },
                "DataPipeline": {
                    "type": "object",
                    "properties": {
                        "role": { "$ref": "#/$defs/identifier" }
                    },
                    "required": [ "role" ],
                    "additionalProperties": false
                },
                "RedshiftCluster": {
                    "type": "object",
                    "properties": {
                        "name": { "$ref": "#/$defs/identifier" },
                        "max_concurrency": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "wlm_query_slots": {
                            "type": "integer",
                            "minimum": 1
                        },
                        "statement_timeout": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [ "key_name", "VPC", "EC2", "EMR", "DataPipeline" ],
            "additionalProperties": false
        },
        "pipelines": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "unique-id": { "$ref": "#/$defs/identifier" },
                    "description": { "type": "string" },
                    "start-time": { "type": "string" },
                    "occurrences": { "type": "integer" },
                    "patterns": { "$ref": "#/$defs/glob_pattern_list" }
                },
                "required": [ "unique-id", "description" ],
                "additionalProperties": false
            },
            "uniqueItems": true
        },
        "etl_events": {
            "type": "object",
            "properties": {
                "enabled": { "type": "boolean" },
                "read_capacity": { "type": "integer" },
                "write_capacity": { "type": "integer" }
            },
            "required": [ "enabled", "read_capacity", "write_capacity" ],
            "additionalProperties": false
        },
        "date": {
            "type": "object",
            "properties": {
                "today": { "type": "string" },
                "yesterday": { "type": "string" }
            },
            "additionalProperties": false
        }
    },
    "required": [ "arthur_settings", "data_warehouse", "type_maps", "object_store", "resources", "etl_events" ],
    "additionalProperties": false
}
